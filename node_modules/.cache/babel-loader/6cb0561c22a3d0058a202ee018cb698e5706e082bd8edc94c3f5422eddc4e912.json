{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\hangman-frontend\\\\src\\\\DisplayWord.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*\r\n    We can think of three kinds of characters in the answer phrase:\r\n    * Special characters (e.g. spaces and punctuation)\r\n    * Letters that the user hasn't guessed yet\r\n    * Letters that the user has already guessed\r\n*/\n\nfunction DisplayWord(_ref) {\n  let {\n    answer,\n    unrevealedLetters,\n    isSpecialChar,\n    isGameDone\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: new Array(...answer).map(char => {\n      if (isSpecialChar(char)) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char-tile\",\n          children: char\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 29\n        }, this);\n      }\n      if (isGameDone) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char-tile letter-tile \" + unrevealedLetters.has(char),\n          children: char\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 25\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"char-tile letter-tile\",\n        children: unrevealedLetters.has(char) ? \"\" : char\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n}\n_c = DisplayWord;\nexport default DisplayWord;\nvar _c;\n$RefreshReg$(_c, \"DisplayWord\");","map":{"version":3,"names":["DisplayWord","_ref","answer","unrevealedLetters","isSpecialChar","isGameDone","_jsxDEV","children","Array","map","char","className","fileName","_jsxFileName","lineNumber","columnNumber","has","_c","$RefreshReg$"],"sources":["C:/Users/HP/hangman-frontend/src/DisplayWord.js"],"sourcesContent":["\r\n/*\r\n    We can think of three kinds of characters in the answer phrase:\r\n    * Special characters (e.g. spaces and punctuation)\r\n    * Letters that the user hasn't guessed yet\r\n    * Letters that the user has already guessed\r\n*/\r\n\r\nfunction DisplayWord({answer, unrevealedLetters, isSpecialChar, isGameDone}) {\r\n    \r\n    return(\r\n        <div>\r\n            {new Array(...answer).map((char) => {\r\n                if(isSpecialChar(char)) {\r\n                    return (<div className=\"char-tile\">{char}</div>);\r\n                }\r\n                if(isGameDone) {\r\n                    return(\r\n                        <div className={\"char-tile letter-tile \" + (unrevealedLetters.has(char))}>\r\n                            {char}\r\n                        </div>\r\n                    )\r\n                }\r\n                return(\r\n                    <div className={\"char-tile letter-tile\"}>\r\n                        {unrevealedLetters.has(char) ? \"\" : char}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nexport default DisplayWord;"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAWA,CAAAC,IAAA,EAAyD;EAAA,IAAxD;IAACC,MAAM;IAAEC,iBAAiB;IAAEC,aAAa;IAAEC;EAAU,CAAC,GAAAJ,IAAA;EAEvE,oBACIK,OAAA;IAAAC,QAAA,EACK,IAAIC,KAAK,CAAC,GAAGN,MAAM,CAAC,CAACO,GAAG,CAAEC,IAAI,IAAK;MAChC,IAAGN,aAAa,CAACM,IAAI,CAAC,EAAE;QACpB,oBAAQJ,OAAA;UAAKK,SAAS,EAAC,WAAW;UAAAJ,QAAA,EAAEG;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAO;MACnD;MACA,IAAGV,UAAU,EAAE;QACX,oBACIC,OAAA;UAAKK,SAAS,EAAE,wBAAwB,GAAIR,iBAAiB,CAACa,GAAG,CAACN,IAAI,CAAG;UAAAH,QAAA,EACpEG;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACH;MAEd;MACA,oBACIT,OAAA;QAAKK,SAAS,EAAE,uBAAwB;QAAAJ,QAAA,EACnCJ,iBAAiB,CAACa,GAAG,CAACN,IAAI,CAAC,GAAG,EAAE,GAAGA;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACtC;IAEd,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEd;AAACE,EAAA,GAvBQjB,WAAW;AAwBpB,eAAeA,WAAW;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\hangman-frontend\\\\src\\\\InputLetter.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\n\n/*\r\nNotes:\r\n    * The idea is to create a text input element so that when the user wants to guess a letter, they can select the input element and type in the desired letter using their keyboard. I thought that this would be preferable to creating an on-screen keyboard (similar to Wordle's interface) because:\r\n        - Mobile users can use their existing keyboard\r\n        - It would be (at least theoretically) easier to add support for other languages\r\n        - The component should take up less screen space\r\n*/\n\n/*\r\nDefault function for the letterIsValid prop of the LetterInput component (please see below)\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction isLetter(letter) {\n  const p = /^[A-Za-z]$/;\n  return p.test(letter);\n}\nfunction InputLetter(_ref) {\n  _s();\n  let {\n    isValidLetter = isLetter,\n    guessedLetters,\n    onGuessSubmitted\n  } = _ref;\n  const [inputLetter, setInputLetter] = useState('');\n  const [canGuessLetter, setCanGuessLetter] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  function submitGuess() {\n    let guess = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : inputLetter;\n    if (canGuessLetter) {\n      setInputLetter('');\n      setCanGuessLetter(false);\n      onGuessSubmitted(guess);\n    }\n  }\n  function inputLetterChanged(newLetter) {\n    if (!newLetter) {\n      setErrorMsg(\"\");\n      setCanGuessLetter(false);\n    } else if (guessedLetters.has(newLetter)) {\n      setErrorMsg(\"Already guessed that letter.\");\n      setCanGuessLetter(false);\n    } else if (!isValidLetter(newLetter)) {\n      setErrorMsg(\"Invalid letter.\");\n      setCanGuessLetter(false);\n    } else {\n      setErrorMsg(\"\");\n      setCanGuessLetter(true);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"letter-input\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        submitGuess();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Guess a letter:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputLetter,\n          maxLength: 1,\n          className: \"input-text\",\n          onChange: e => {\n            const newLetter = e.target.value.toUpperCase();\n            if (isLetter(newLetter)) {\n              setInputLetter(newLetter);\n              inputLetterChanged(newLetter);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit Guess\",\n          disabled: !canGuessLetter,\n          className: \"input-submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-msg\",\n        children: errorMsg && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: errorMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(InputLetter, \"slNx+m3JMgX/QtDruCaSANN7xYU=\");\n_c = InputLetter;\nexport default InputLetter;\nvar _c;\n$RefreshReg$(_c, \"InputLetter\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","isLetter","letter","p","test","InputLetter","_ref","_s","isValidLetter","guessedLetters","onGuessSubmitted","inputLetter","setInputLetter","canGuessLetter","setCanGuessLetter","errorMsg","setErrorMsg","submitGuess","guess","arguments","length","undefined","inputLetterChanged","newLetter","has","className","children","onSubmit","e","preventDefault","type","value","maxLength","onChange","target","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","disabled","_c","$RefreshReg$"],"sources":["C:/Users/HP/hangman-frontend/src/InputLetter.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\n/*\r\nNotes:\r\n    * The idea is to create a text input element so that when the user wants to guess a letter, they can select the input element and type in the desired letter using their keyboard. I thought that this would be preferable to creating an on-screen keyboard (similar to Wordle's interface) because:\r\n        - Mobile users can use their existing keyboard\r\n        - It would be (at least theoretically) easier to add support for other languages\r\n        - The component should take up less screen space\r\n*/\r\n\r\n/*\r\nDefault function for the letterIsValid prop of the LetterInput component (please see below)\r\n*/\r\nfunction isLetter(letter) {\r\n    const p = /^[A-Za-z]$/; \r\n    return p.test(letter);\r\n}\r\n\r\nfunction InputLetter({isValidLetter=isLetter, guessedLetters, onGuessSubmitted}) {\r\n    const [inputLetter, setInputLetter] = useState('');\r\n    const [canGuessLetter, setCanGuessLetter] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n    function submitGuess(guess=inputLetter) {\r\n        if(canGuessLetter) {\r\n            setInputLetter('');\r\n            setCanGuessLetter(false);\r\n            onGuessSubmitted(guess);\r\n        }   \r\n    }\r\n\r\n    function inputLetterChanged(newLetter) {\r\n        if(!newLetter) { \r\n            setErrorMsg(\"\");\r\n            setCanGuessLetter(false);\r\n        }\r\n        else if(guessedLetters.has(newLetter)) {\r\n            setErrorMsg(\"Already guessed that letter.\");\r\n            setCanGuessLetter(false);\r\n        }   \r\n        else if(!isValidLetter(newLetter)) {\r\n            setErrorMsg(\"Invalid letter.\");\r\n            setCanGuessLetter(false);\r\n        }\r\n        else {\r\n            setErrorMsg(\"\");\r\n            setCanGuessLetter(true);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"letter-input\">\r\n            <form onSubmit={(e) => {\r\n                e.preventDefault();\r\n                submitGuess()}}>\r\n            <label>\r\n                Guess a letter:\r\n                <input type=\"text\" value={inputLetter} maxLength={1}\r\n                className=\"input-text\"\r\n                onChange={(e) => {\r\n                    const newLetter = e.target.value.toUpperCase();\r\n                    if(isLetter(newLetter)) {\r\n                        setInputLetter(newLetter);\r\n                        inputLetterChanged(newLetter);\r\n                    }\r\n                }}\r\n                />\r\n            </label>\r\n            <div>\r\n                <input type=\"submit\" value=\"Submit Guess\"\r\n                disabled={!canGuessLetter}\r\n                className=\"input-submit\"/>\r\n            </div>\r\n            <div className=\"error-msg\">\r\n                {errorMsg && ( <div>{errorMsg}</div>)}\r\n            </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputLetter;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
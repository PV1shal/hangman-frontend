{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\hangman-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport InputLetter from './InputLetter';\nimport DisplayWord from './DisplayWord';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction isLetter(char) {\n  return /^[A-Za-z]$/.test(char);\n}\nfunction isSpecialChar(char) {\n  return !isLetter(char);\n}\nfunction App() {\n  _s();\n  const [userName, setUserName] = useState(\"\");\n  // const [gameUrl, setGameUrl] = useState(\"\"); \n  const [gameOngoing, setGameOngoing] = useState(false);\n  const [gameAnswer, setGameAnswer] = useState(\"\");\n  const [charsGuessed, setCharsGuessed] = useState(new Set());\n  const [unrevealedLetters, setUnrevealedLetters] = useState(new Set());\n  const [lives, setLives] = useState(0);\n  const [msg, setMsg] = useState(\"\");\n\n  // For login to the game\n  //\n  useEffect(() => {\n    const storedName = localStorage.getItem(\"loggedInUser\");\n    if (storedName) {\n      setUserName(storedName);\n    }\n  }, []);\n  useEffect(() => {\n    if (userName) {\n      localStorage.setItem(\"loggedInUser\", userName);\n    }\n  }, [userName]);\n\n  // To read the game state from the URL query parameter\n  // useEffect(() => {\n  //   const queryParams = new URLSearchParams(window.location.search);\n  //   const gameId = queryParams.get(\"gameId\");\n  //   const answer = queryParams.get(\"answer\");\n  //   const guessedLetters = queryParams.get(\"charsGuessed\");\n  //   const numLives = queryParams.get(\"lives\");\n  //   if (gameId && answer) {\n  //     setGameAnswer(answer);\n  //     setUnrevealedLetters(new Set(new Array(...answer).filter(char => isLetter(char))));\n  //     setCharsGuessed(new Set(guessedLetters ? guessedLetters.split(\"\") : []));\n  //     setLives(numLives ? parseInt(numLives) : 0);\n  //     setGameOngoing(true);\n  //   }\n  // }, []);\n\n  function newGame(newAnswer) {\n    const answer = newAnswer.toUpperCase();\n    setGameAnswer(answer);\n    setUnrevealedLetters(new Set(new Array(...answer).filter(char => isLetter(char))));\n    setCharsGuessed(new Set());\n    setLives(5);\n    setMsg(\"\");\n    setGameOngoing(true);\n\n    // To generate a unique game ID\n    // const gameId = Math.random().toString(36).substr(2, 9);\n    // // Update the URL query parameter with the game ID and game state\n    // const queryParams = new URLSearchParams(window.location.search);\n    // queryParams.set(\"gameId\", gameId);\n    // queryParams.set(\"answer\", answer);\n    // queryParams.set(\"charsGuessed\", \"\");\n    // queryParams.set(\"lives\", \"5\");\n    // window.history.replaceState({}, \"\", \"?\" + queryParams.toString());\n    // // Update the game URL state variable with the generated URL\n    // setGameUrl(window.location.href);\n  }\n\n  function onGuessSubmitted(guessedChar) {\n    if (unrevealedLetters.has(guessedChar)) {\n      let newSet = new Set(unrevealedLetters);\n      newSet.delete(guessedChar);\n      setUnrevealedLetters(newSet);\n      if (newSet.size <= 0) {\n        setMsg(\"You won!\");\n        setGameOngoing(false);\n      }\n    } else {\n      const p = lives - 1;\n      setLives(p);\n      if (p <= 0) {\n        setMsg(\"You lost.\");\n        setGameOngoing(false);\n      }\n    }\n    let newCharsGuessed = new Set(charsGuessed);\n    newCharsGuessed.add(guessedChar);\n    setCharsGuessed(newCharsGuessed);\n  }\n  function newGameButtonClicked() {\n    const newAnswer = \"popcorn\"; //this is where you set the word for the game\n    newGame(newAnswer);\n    //   const gameId = Math.random().toString(36).substr(2, 9); // to generate a random game ID\n    //   setGameUrl(`${window.location.href}?game=${gameId}`); // to update the gameUrl with the new game ID\n  }\n\n  // function shareGame() {\n  //   const queryParams = new URLSearchParams({\n  //     word: gameAnswer,\n  //     guessedLetters: Array.from(charsGuessed).join(\"\"),\n  //     lives: lives\n  //   });\n  //   const url = `${window.location.href.split(\"?\")[0]}?${queryParams.toString()}`;\n  //   navigator.clipboard.writeText(url);\n  //   alert(\"Game URL copied to clipboard!\");\n  // }\n\n  // For Logout\n  const SignOut = () => {\n    // Remove the game ID from the URL query parameter\n    // const urlParams = new URLSearchParams(window.location.search);\n    // urlParams.delete(\"gameId\");\n    // const newUrl = window.location.pathname + \"?\" + urlParams.toString();\n    // window.history.replaceState(null, \"\", newUrl);\n\n    localStorage.removeItem(\"loggedInUser\");\n    window.location.href = \"/\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DisplayWord, {\n      answer: gameAnswer,\n      unrevealedLetters: unrevealedLetters,\n      isSpecialChar: isSpecialChar,\n      isGameFinished: !gameOngoing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout\",\n        title: \"logout\",\n        onClick: () => SignOut(),\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Guessed Letters:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"guessed-letters\",\n        children: new Array(charsGuessed).map(letter => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"guessed-letter\",\n            children: letter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Lives: \", lives]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), gameOngoing ? /*#__PURE__*/_jsxDEV(InputLetter, {\n        isValidLetter: isLetter,\n        guessedLetters: charsGuessed,\n        onGuessSubmitted: onGuessSubmitted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 10\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: newGameButtonClicked,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"msg\",\n      children: msg && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: msg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9dJCW/47aI6AHfD6z1HQD8Ab96Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","InputLetter","DisplayWord","jsxDEV","_jsxDEV","isLetter","char","test","isSpecialChar","App","_s","userName","setUserName","gameOngoing","setGameOngoing","gameAnswer","setGameAnswer","charsGuessed","setCharsGuessed","Set","unrevealedLetters","setUnrevealedLetters","lives","setLives","msg","setMsg","storedName","localStorage","getItem","setItem","newGame","newAnswer","answer","toUpperCase","Array","filter","onGuessSubmitted","guessedChar","has","newSet","delete","size","p","newCharsGuessed","add","newGameButtonClicked","SignOut","removeItem","window","location","href","className","children","isGameFinished","fileName","_jsxFileName","lineNumber","columnNumber","title","onClick","map","letter","isValidLetter","guessedLetters","_c","$RefreshReg$"],"sources":["C:/Users/HP/hangman-frontend/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport InputLetter from './InputLetter';\nimport DisplayWord from './DisplayWord';\n\nfunction isLetter(char) {\n  return /^[A-Za-z]$/.test(char);\n}\n\nfunction isSpecialChar(char) {\n  return !isLetter(char);\n}\n\n\nfunction App() {\n\n  const [userName, setUserName] = useState(\"\");\n  // const [gameUrl, setGameUrl] = useState(\"\"); \n  const [gameOngoing, setGameOngoing] = useState(false)\n  const [gameAnswer, setGameAnswer] = useState(\"\");\n  const [charsGuessed, setCharsGuessed] = useState(new Set());\n  const [unrevealedLetters, setUnrevealedLetters] = useState(new Set());\n  const [lives, setLives] = useState(0);\n  const [msg, setMsg] = useState(\"\");\n\n  // For login to the game\n  //\n  useEffect(() => {\n    const storedName = localStorage.getItem(\"loggedInUser\");\n      if (storedName) {\n      setUserName(storedName);\n     }\n  }, []);\n\n   useEffect(() => {\n     if (userName) {\n       localStorage.setItem(\"loggedInUser\", userName);\n     }\n   }, [userName]);\n  \n  // To read the game state from the URL query parameter\n  // useEffect(() => {\n  //   const queryParams = new URLSearchParams(window.location.search);\n  //   const gameId = queryParams.get(\"gameId\");\n  //   const answer = queryParams.get(\"answer\");\n  //   const guessedLetters = queryParams.get(\"charsGuessed\");\n  //   const numLives = queryParams.get(\"lives\");\n  //   if (gameId && answer) {\n  //     setGameAnswer(answer);\n  //     setUnrevealedLetters(new Set(new Array(...answer).filter(char => isLetter(char))));\n  //     setCharsGuessed(new Set(guessedLetters ? guessedLetters.split(\"\") : []));\n  //     setLives(numLives ? parseInt(numLives) : 0);\n  //     setGameOngoing(true);\n  //   }\n  // }, []);\n\n    function newGame(newAnswer) {\n      const answer = newAnswer.toUpperCase();\n      setGameAnswer(answer);\n      setUnrevealedLetters(new Set(new Array(...answer).filter(char => isLetter(char))));\n      setCharsGuessed(new Set());\n      setLives(5);\n      setMsg(\"\");\n      setGameOngoing(true);\n\n      // To generate a unique game ID\n      // const gameId = Math.random().toString(36).substr(2, 9);\n      // // Update the URL query parameter with the game ID and game state\n      // const queryParams = new URLSearchParams(window.location.search);\n      // queryParams.set(\"gameId\", gameId);\n      // queryParams.set(\"answer\", answer);\n      // queryParams.set(\"charsGuessed\", \"\");\n      // queryParams.set(\"lives\", \"5\");\n      // window.history.replaceState({}, \"\", \"?\" + queryParams.toString());\n      // // Update the game URL state variable with the generated URL\n      // setGameUrl(window.location.href);\n    }\n\n  function onGuessSubmitted(guessedChar) {\n    if(unrevealedLetters.has(guessedChar)) {\n      let newSet = new Set(unrevealedLetters);\n      newSet.delete(guessedChar);\n      setUnrevealedLetters(newSet);\n \n      if(newSet.size <= 0) {\n        setMsg(\"You won!\");\n        setGameOngoing(false); \n      }\n    }\n    else {\n      const p = lives - 1;\n      setLives(p);\n      if(p <= 0) {\n        setMsg(\"You lost.\");\n        setGameOngoing(false);\n      }\n    }\n\n    let newCharsGuessed = new Set(charsGuessed);\n    newCharsGuessed.add(guessedChar);\n    setCharsGuessed(newCharsGuessed);\n  }\n\n  function newGameButtonClicked() {\n    const newAnswer = \"popcorn\"; //this is where you set the word for the game\n    newGame(newAnswer);\n  //   const gameId = Math.random().toString(36).substr(2, 9); // to generate a random game ID\n  //   setGameUrl(`${window.location.href}?game=${gameId}`); // to update the gameUrl with the new game ID\n  }\n\n  // function shareGame() {\n  //   const queryParams = new URLSearchParams({\n  //     word: gameAnswer,\n  //     guessedLetters: Array.from(charsGuessed).join(\"\"),\n  //     lives: lives\n  //   });\n  //   const url = `${window.location.href.split(\"?\")[0]}?${queryParams.toString()}`;\n  //   navigator.clipboard.writeText(url);\n  //   alert(\"Game URL copied to clipboard!\");\n  // }\n\n  // For Logout\n  const SignOut = () => {\n    // Remove the game ID from the URL query parameter\n    // const urlParams = new URLSearchParams(window.location.search);\n    // urlParams.delete(\"gameId\");\n    // const newUrl = window.location.pathname + \"?\" + urlParams.toString();\n    // window.history.replaceState(null, \"\", newUrl);\n\n    localStorage.removeItem(\"loggedInUser\");\n    window.location.href = \"/\";\n  };\n\n  return (\n    <div className=\"App\">\n      <DisplayWord answer={gameAnswer} unrevealedLetters={unrevealedLetters} isSpecialChar={isSpecialChar} isGameFinished={!gameOngoing}/>\n      <div>\n        <button className=\"logout\" title=\"logout\" onClick={() => SignOut()}>Logout</button>\n        {/* <button onClick={shareGame}>Share Game</button> */}\n      </div>\n      <div>\n        <h2>Guessed Letters:</h2>\n        <div className=\"guessed-letters\">\n          {new Array(charsGuessed).map((letter) => {\n            return(<div className=\"guessed-letter\">{letter}</div>);\n          })}\n        </div>\n        <div>\n          Lives: {lives}\n        </div>\n        {gameOngoing ? \n        (<InputLetter isValidLetter={isLetter} guessedLetters={charsGuessed} onGuessSubmitted={onGuessSubmitted}/>)\n        :\n        (<button onClick={newGameButtonClicked}>New Game</button>)}\n      </div>\n      <div className=\"msg\">\n                {msg && ( <div>{msg}</div>)}\n            </div>\n    </div>\n      \n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}